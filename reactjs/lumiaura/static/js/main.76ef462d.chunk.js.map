{"version":3,"sources":["control/area-search/From.js","control/area-search/To.js","control/AreaSearch.js","control/activities/JobType.js","control/Activities.js","control/SearchPanel.js","App.js","serviceWorker.js","index.js"],"names":["fromLoc","props","react_default","a","createElement","className","type","placeholder","defaultValue","address","toLoc","onKeyPress","locationTo","areaSearch","From","home","To","jobtype","value","onChange","e","selectJob","target","label","activities","map","j","activities_JobType","key","searchpanel","control_AreaSearch","control_Activities","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","plowMarker","icon","iconSize","mapCenter","App","state","collapsed","selected","locationFrom","coordTo","showMarkerTo","trail","hasTrail","plows","plowsCoord","plowsReady","fetchLocn","event","axios","get","concat","then","response","_response$data$featur","Object","slicedToArray","lon","lat","_this","setState","console","log","catch","error","fetchActivities","coords","data","plow","_plow$last_location$c","last_location","lo","showTrace","jobsOfType","filter","p","events","includes","id","all","location","arrayOfPlows","location_history","history","locationHistory","toConsumableArray","err","displayOverlay","color","i","Polyline","positions","this","_this2","index_es","position","closeIcon","fi","onOpen","bind","onClose","header","Fragment","control_SearchPanel","Map","center","zoom","whenReady","TileLayer","attribution","url","Marker","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.76ef462d.chunk.js","sourcesContent":["import React from 'react'\nimport '../../layout/AreaSearch.css'\n\nconst fromLoc =(props)=> {\n\n  return (\n    <div className=\"ui input\">\n      <input\n          type=\"text\"\n          placeholder=\"From...\"\n          defaultValue={ props.address } />\n    </div>\n  )\n}\n\nexport default fromLoc","import React from 'react'\nimport '../../layout/JobType.css'\n\nconst toLoc =(props)=> {\n  return (\n    <div className=\"ui input\">\n      <input\n          type=\"text\"\n          placeholder=\"To...\"\n          onKeyPress={ props.locationTo } />\n    </div>\n  )\n}\n\nexport default toLoc","import React from 'react'\nimport From from './area-search/From'\nimport To from './area-search/To'\n\nimport '../layout/AreaSearch.css'\n\nconst areaSearch =(props)=> (\n  <div className=\"AreaSearch\">\n    <From address={ props.home }/>\n    <To locationTo={ props.locationTo } />\n  </div>\n)\n\nexport default areaSearch","import React from 'react'\n\nimport '../../layout/JobType.css'\n\nconst jobtype =(props)=> {\n  return (\n    <label className=\"JobType ui label\">\n      <input type=\"checkbox\"\n          className=\"ui checkbox\"\n            value={ props.type }\n              onChange={(e)=>  props.selectJob(e.target.value) } />\n        { props.label  }\n    </label>\n  )\n}\n\nexport default jobtype","import React from 'react'\nimport JobType from './activities/JobType'\nimport '../layout/Activities.css'\n\nconst activities =(props)=> {\n  const jobtypes = [\n    {type: 'su', label: 'Road'},\n    {type: 'kv', label: 'Cycling Paths'},\n    {type: 'hi', label: 'Pedestrian/Footpaths'}\n  ]\n\n  return jobtypes.map(j=> (\n    <JobType\n        key={ j.type }\n          type={ j.type }\n            label={ j.label }\n              selectJob={ props.selectJob } />\n  ))\n}\n\nexport default activities","import React from 'react'\nimport AreaSearch from './AreaSearch'\nimport Activities from './Activities'\n\nimport '../layout/SearchPanel.css'\n\nconst searchpanel =(props)=> {\n  return (\n    <div className=\"SearchPanel\">\n      <AreaSearch\n          home={ props.home }\n            locationTo={ props.locationTo } />\n      <Activities\n          selectJob={ props.selectJob }/>\n    </div>\n  )\n}\n\nexport default searchpanel","import React, { Component } from 'react';\nimport axios from 'axios'\nimport {Map, TileLayer, Marker, Polyline} from  'react-leaflet'\nimport {Sidebar, Tab} from 'react-leaflet-sidetabs'\nimport { FiChevronRight, FiSearch } from 'react-icons/fi'\nimport SearchPanel from './control/SearchPanel'\n\nimport './App.css'\nimport 'leaflet/dist/leaflet.css'\nimport L from 'leaflet';\n\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\nconst plowMarker = L.icon({\n  iconUrl: 'plow.png',\n  iconSize: [20, 20]\n})\n\nconst tonerTiles = 'http://stamen-tiles-{s}.a.ssl.fastly.net/toner-background/{z}/{x}/{y}.png'\nconst tonerAttrb = 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\nconst mapCenter = [60.1713, 24.8280]\nconst zoomLevel = 12\n\nclass App extends Component {\n\n  state = {\n    collapsed: true,\n    selected:'\bhome',\n    locationFrom: '',\n    coordTo: [],            //The coordinates to the inputted address in the 'To' field\n    showMarkerTo: false,    //The 'To' location's marker\n    trail: [],              //Coordinates to the plows' activity history\n    hasTrail: false,        //`trail` has just been updated with coords values\n    plows: [],              //All the active plows...\n    plowsCoord: [],         // ...and their latest respective coordinates\n    plowsReady: false       //`plows` and `plowsCoord` have just been updated with values\n  }\n\n  fetchLocn =(event)=> {\n    if (event.key === 'Enter') {\n      axios\n        .get(`https://api.digitransit.fi/geocoding/v1/search?text=${event.target.value}&size=1`)\n        .then(response=> {\n          let [lon, lat] = response['data']['features'][0]['geometry']['coordinates']\n          this.setState({\n            coordTo: [lat, lon],\n            showMarkerTo: true\n          })\n          console.log(this.state.coordTo)\n        })\n        .catch (error=> {\n          console.log(error)\n        })\n    }\n  }\n\n  fetchActivities =()=> {\n    axios\n      .get('http://dev.hel.fi/aura/v1/snowplow/')\n      .then(response=> {\n          const coords = response.data.map((plow)=> {\n            let [lo, la] = plow.last_location.coords\n            return [la, lo]\n          })\n\n          this.setState({\n            plows: response.data,\n            plowsCoord: coords,\n            plowsReady: true\n          })\n          // console.log('fetchActivities: ',this.state.plowsCoord)\n      })\n  }\n\n  showTrace =(jobtype)=> {\n\n    //For each active plow doing a specific job type\n    if (this.state.plowsReady) {\n\n      const plowWithJobtype = this.state.plows.filter(p=> {\n        return p.last_location.events.includes(jobtype)\n      })\n\n      //  extract their id and\n      //  query API server for plow's location history\n      const jobsOfType = plowWithJobtype.map(plow=>\n        axios.get(`http://dev.hel.fi/aura/v1/snowplow/${plow.id}?history=900&temporal_resolution=60&since=4hours-ago`)\n      )\n\n      axios.all(jobsOfType)\n        .then(plows=> {\n          const location = plows.map(arrayOfPlows=> arrayOfPlows.data.location_history)\n                              .map(plow=> plow)\n                            .map(location=> location.map(history=> history))\n                          .map(locationHistory=> locationHistory.map(p=> [p.coords[1], p.coords[0]]) )\n\n          this.setState(()=>{\n            return {\n              hasTrail: true,\n              trail: [...this.state.trail, location]\n            }\n          })\n        })\n        .catch(err=> console.log('catch: ', err))\n    }\n  }\n\n  displayOverlay =(e)=> {\n    const color = ['red', 'green', 'yellow']\n    return this.state.trail.map((trail, i)=>\n      <Polyline positions={ trail } key={i+1} color={ color[i] }/>\n    )\n  }\n\n  onClose() {\n    this.setState({collapsed: true});\n  }\n\n  onOpen(id) {\n    this.setState({\n      collapsed: false,\n      selected: id,\n    })\n  }\n\n  componentDidMount() {\n    axios\n      .get(`https://api.digitransit.fi/geocoding/v1/reverse?point.lat=${mapCenter[0]}&point.lon=${mapCenter[1]}&size=1&layers=address`)\n      .then(response=> {\n        this.setState({\n          locationFrom: response['data']['features'][0]['properties']['label']\n        })\n      })\n      .catch (error=> {\n        console.log(error)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Sidebar\n            id=\"sidebar\"\n              position=\"left\"\n                collapsed={this.state.collapsed}\n                  closeIcon={<FiChevronRight />}\n                    selected={this.state.selected}\n                      onOpen={this.onOpen.bind(this)}\n                        onClose={this.onClose.bind(this)}>\n          <Tab\n            id=\"search\"\n              header=\"Search\"\n                icon={<FiSearch />}>\n              <>\n             <SearchPanel\n                home={ this.state.locationFrom }\n                  locationTo={ this.fetchLocn }\n                    selectJob={ this.showTrace } />\n              </>\n\n          </Tab>\n        </Sidebar>\n\n        <Map\n          className=\"mapStyle sidebar-map\"\n            center={mapCenter}\n              zoom={zoomLevel}\n               whenReady={ this.fetchActivities }>\n          <TileLayer\n            attribution={tonerAttrb}\n              url={tonerTiles}/>\n\n          <Marker position={mapCenter} />\n\n          {\n            this.state.showMarkerTo\n            ? <Marker position={this.state.coordTo} />\n            : null\n          }\n\n\n          { this.state.plowsReady\n            ? this.state.plowsCoord.map((p, i)=> <Marker\n                position={ p }\n                key={ i }\n                icon={ plowMarker }/>)\n            : null\n          }\n\n          { this.state.hasTrail\n            ? this.displayOverlay()\n            : null\n          }\n\n        </Map>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}